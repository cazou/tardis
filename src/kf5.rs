/**
 * Copyright Contributors to the tardis project
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */

use std::f64::consts::PI;
use crate::time;
use crate::algebra::evalpoly;

//TODO: Cite a source for this table
const NUT_COEFS_1980: [[f64; 9]; 106] = [
    // Notation used in [1, p. 226].
    //
    // an1  an2  an3  an4  an5        Ai            Bi         Ci            Di
    //                  Units:  [0.0001"]  [0.0001"/JC]  [0.0001"]  [0.0001"/JC]
    [0.0, 0.0, 0.0, 0.0, 1.0, -171996.0, -174.2, 92025.0, 8.9],
    [0.0, 0.0, 2.0, -2.0, 2.0, -13187.0, -1.6, 5736.0, -3.1],
    [0.0, 0.0, 2.0, 0.0, 2.0, -2274.0, -0.2, 977.0, -0.5],
    [0.0, 0.0, 0.0, 0.0, 2.0, 2062.0, 0.2, -895.0, 0.5],
    [0.0, -1.0, 0.0, 0.0, 0.0, -1426.0, 3.4, 54.0, -0.1],
    [1.0, 0.0, 0.0, 0.0, 0.0, 712.0, 0.1, -7.0, 0.0],
    [0.0, 1.0, 2.0, -2.0, 2.0, -517.0, 1.2, 224.0, -0.6],
    [0.0, 0.0, 2.0, 0.0, 1.0, -386.0, -0.4, 200.0, 0.0],
    [1.0, 0.0, 2.0, 0.0, 2.0, -301.0, 0.0, 129.0, -0.1],
    [0.0, -1.0, 2.0, -2.0, 2.0, 217.0, -0.5, -95.0, 0.3],
    [-1.0, 0.0, 0.0, 2.0, 0.0, 158.0, 0.0, -1.0, 0.0],
    [0.0, 0.0, 2.0, -2.0, 1.0, 129.0, 0.1, -70.0, 0.0],
    [-1.0, 0.0, 2.0, 0.0, 2.0, 123.0, 0.0, -53.0, 0.0],
    [1.0, 0.0, 0.0, 0.0, 1.0, 63.0, 0.1, -33.0, 0.0],
    [0.0, 0.0, 0.0, 2.0, 0.0, 63.0, 0.0, -2.0, 0.0],
    [-1.0, 0.0, 2.0, 2.0, 2.0, -59.0, 0.0, 26.0, 0.0],
    [-1.0, 0.0, 0.0, 0.0, 1.0, -58.0, -0.1, 32.0, 0.0],
    [1.0, 0.0, 2.0, 0.0, 1.0, -51.0, 0.0, 27.0, 0.0],
    [-2.0, 0.0, 0.0, 2.0, 0.0, -48.0, 0.0, 1.0, 0.0],
    [-2.0, 0.0, 2.0, 0.0, 1.0, 46.0, 0.0, -24.0, 0.0],
    [0.0, 0.0, 2.0, 2.0, 2.0, -38.0, 0.0, 16.0, 0.0],
    [2.0, 0.0, 2.0, 0.0, 2.0, -31.0, 0.0, 13.0, 0.0],
    [2.0, 0.0, 0.0, 0.0, 0.0, 29.0, 0.0, -1.0, 0.0],
    [1.0, 0.0, 2.0, -2.0, 2.0, 29.0, 0.0, -12.0, 0.0],
    [0.0, 0.0, 2.0, 0.0, 0.0, 26.0, 0.0, -1.0, 0.0],
    [0.0, 0.0, 2.0, -2.0, 0.0, -22.0, 0.0, 0.0, 0.0],
    [-1.0, 0.0, 2.0, 0.0, 1.0, 21.0, 0.0, -10.0, 0.0],
    [0.0, 2.0, 0.0, 0.0, 0.0, 17.0, -0.1, 0.0, 0.0],
    [0.0, 2.0, 2.0, -2.0, 2.0, -16.0, 0.1, 7.0, 0.0],
    [-1.0, 0.0, 0.0, 2.0, 1.0, 16.0, 0.0, -8.0, 0.0],
    [0.0, 1.0, 0.0, 0.0, 1.0, -15.0, 0.0, 9.0, 0.0],
    [1.0, 0.0, 0.0, -2.0, 1.0, -13.0, 0.0, 7.0, 0.0],
    [0.0, -1.0, 0.0, 0.0, 1.0, -12.0, 0.0, 6.0, 0.0],
    [2.0, 0.0, -2.0, 0.0, 0.0, 11.0, 0.0, 0.0, 0.0],
    [-1.0, 0.0, 2.0, 2.0, 1.0, -10.0, 0.0, 5.0, 0.0],
    [1.0, 0.0, 2.0, 2.0, 2.0, -8.0, 0.0, 3.0, 0.0],
    [0.0, -1.0, 2.0, 0.0, 2.0, -7.0, 0.0, 3.0, 0.0],
    [0.0, 0.0, 2.0, 2.0, 1.0, -7.0, 0.0, 3.0, 0.0],
    [1.0, 1.0, 0.0, -2.0, 0.0, -7.0, 0.0, 0.0, 0.0],
    [0.0, 1.0, 2.0, 0.0, 2.0, 7.0, 0.0, -3.0, 0.0],
    [-2.0, 0.0, 0.0, 2.0, 1.0, -6.0, 0.0, 3.0, 0.0],
    [0.0, 0.0, 0.0, 2.0, 1.0, -6.0, 0.0, 3.0, 0.0],
    [2.0, 0.0, 2.0, -2.0, 2.0, 6.0, 0.0, -3.0, 0.0],
    [1.0, 0.0, 0.0, 2.0, 0.0, 6.0, 0.0, 0.0, 0.0],
    [1.0, 0.0, 2.0, -2.0, 1.0, 6.0, 0.0, -3.0, 0.0],
    [0.0, 0.0, 0.0, -2.0, 1.0, -5.0, 0.0, 3.0, 0.0],
    [0.0, -1.0, 2.0, -2.0, 1.0, -5.0, 0.0, 3.0, 0.0],
    [2.0, 0.0, 2.0, 0.0, 1.0, -5.0, 0.0, 3.0, 0.0],
    [1.0, -1.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0],
    [1.0, 0.0, 0.0, -1.0, 0.0, -4.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 1.0, 0.0, -4.0, 0.0, 0.0, 0.0],
    [0.0, 1.0, 0.0, -2.0, 0.0, -4.0, 0.0, 0.0, 0.0],
    [1.0, 0.0, -2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0],
    [2.0, 0.0, 0.0, -2.0, 1.0, 4.0, 0.0, -2.0, 0.0],
    [0.0, 1.0, 2.0, -2.0, 1.0, 4.0, 0.0, -2.0, 0.0],
    [1.0, 1.0, 0.0, 0.0, 0.0, -3.0, 0.0, 0.0, 0.0],
    [1.0, -1.0, 0.0, -1.0, 0.0, -3.0, 0.0, 0.0, 0.0],
    [-1.0, -1.0, 2.0, 2.0, 2.0, -3.0, 0.0, 1.0, 0.0],
    [0.0, -1.0, 2.0, 2.0, 2.0, -3.0, 0.0, 1.0, 0.0],
    [1.0, -1.0, 2.0, 0.0, 2.0, -3.0, 0.0, 1.0, 0.0],
    [3.0, 0.0, 2.0, 0.0, 2.0, -3.0, 0.0, 1.0, 0.0],
    [-2.0, 0.0, 2.0, 0.0, 2.0, -3.0, 0.0, 1.0, 0.0],
    [1.0, 0.0, 2.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0],
    [-1.0, 0.0, 2.0, 4.0, 2.0, -2.0, 0.0, 1.0, 0.0],
    [1.0, 0.0, 0.0, 0.0, 2.0, -2.0, 0.0, 1.0, 0.0],
    [-1.0, 0.0, 2.0, -2.0, 1.0, -2.0, 0.0, 1.0, 0.0],
    [0.0, -2.0, 2.0, -2.0, 1.0, -2.0, 0.0, 1.0, 0.0],
    [-2.0, 0.0, 0.0, 0.0, 1.0, -2.0, 0.0, 1.0, 0.0],
    [2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, -1.0, 0.0],
    [3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0],
    [1.0, 1.0, 2.0, 0.0, 2.0, 2.0, 0.0, -1.0, 0.0],
    [0.0, 0.0, 2.0, 1.0, 2.0, 2.0, 0.0, -1.0, 0.0],
    [1.0, 0.0, 0.0, 2.0, 1.0, -1.0, 0.0, 0.0, 0.0],
    [1.0, 0.0, 2.0, 2.0, 1.0, -1.0, 0.0, 1.0, 0.0],
    [1.0, 1.0, 0.0, -2.0, 1.0, -1.0, 0.0, 0.0, 0.0],
    [0.0, 1.0, 0.0, 2.0, 0.0, -1.0, 0.0, 0.0, 0.0],
    [0.0, 1.0, 2.0, -2.0, 0.0, -1.0, 0.0, 0.0, 0.0],
    [0.0, 1.0, -2.0, 2.0, 0.0, -1.0, 0.0, 0.0, 0.0],
    [1.0, 0.0, -2.0, 2.0, 0.0, -1.0, 0.0, 0.0, 0.0],
    [1.0, 0.0, -2.0, -2.0, 0.0, -1.0, 0.0, 0.0, 0.0],
    [1.0, 0.0, 2.0, -2.0, 0.0, -1.0, 0.0, 0.0, 0.0],
    [1.0, 0.0, 0.0, -4.0, 0.0, -1.0, 0.0, 0.0, 0.0],
    [2.0, 0.0, 0.0, -4.0, 0.0, -1.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 2.0, 4.0, 2.0, -1.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 2.0, -1.0, 2.0, -1.0, 0.0, 0.0, 0.0],
    [-2.0, 0.0, 2.0, 4.0, 2.0, -1.0, 0.0, 1.0, 0.0],
    [2.0, 0.0, 2.0, 2.0, 2.0, -1.0, 0.0, 0.0, 0.0],
    [0.0, -1.0, 2.0, 0.0, 1.0, -1.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 4.0, -2.0, 2.0, 1.0, 0.0, 0.0, 0.0],
    [0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0],
    [1.0, 1.0, 2.0, -2.0, 2.0, 1.0, 0.0, -1.0, 0.0],
    [3.0, 0.0, 2.0, -2.0, 2.0, 1.0, 0.0, 0.0, 0.0],
    [-2.0, 0.0, 2.0, 2.0, 2.0, 1.0, 0.0, -1.0, 0.0],
    [-1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, -1.0, 0.0],
    [0.0, 0.0, -2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0],
    [0.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
    [-1.0, 0.0, 4.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0],
    [2.0, 1.0, 0.0, -2.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    [2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    [2.0, 0.0, 2.0, -2.0, 1.0, 1.0, 0.0, -1.0, 0.0],
    [2.0, 0.0, -2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
    [1.0, -1.0, 0.0, -2.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    [-1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
    [-1.0, -1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0],
    [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0]
];

pub fn precession(jd_tt: f64) -> [f64; 3]
{
    // Compute the Julian Centuries from `JD_TT`.
    let t_tt = (jd_tt - time::JD_J2000) / 36525.0;

    // Compute the angles [arcsec].
    let mut x = evalpoly(t_tt, vec![0.0, 2306.2181, 0.30188, 0.017998]);
    let mut y = evalpoly(t_tt, vec![0.0, 2004.3109, -0.42665, -0.041833]);
    let mut z = evalpoly(t_tt, vec![0.0, 2306.2181, 1.09468, 0.018203]);

    // Normalize the angles in the interval [0, 86400]s and convert to rad.
    let s2r = PI / 648000.0;

    x = (x * s2r) % (2.0 * PI);
    y = (y * s2r) % (2.0 * PI);
    z = (z * s2r) % (2.0 * PI);

    // Return the date.
    [x, y, z]
}

pub fn nutation(tt: f64) -> [f64; 3]
{
    // Compute the Julian Centuries from `JD_TT`.
    let t_tt = (tt - time::JD_J2000) / 36525.0;

    // Auxiliary variables
    // ===================

    let d2r = PI / 180.0;

    // Mean obliquity of the ecliptic
    // ==============================

    // Compute the mean obliquity of the ecliptic [°].
    let mean_obliquity = evalpoly(t_tt, vec![23.439291, -0.0130042, -1.64e-7, 5.04e-7]);

    // Reduce to the interval [0, 2π]°.
    let mean_obliquity = (mean_obliquity % 360.0) * d2r;

    // Delaunay parameters of the Sun and Moon
    // =======================================

    // Evaluate the Delaunay parameters associated with the Moon and the Sun
    // in the interval [0,2π]°.
    //
    // The parameters here were updated as stated in the errata [2].
    let r = 360.0;

    let mut M_m = evalpoly(
        t_tt,
        vec![134.96298139,
             (1325.0 * r + 198.8673981),
             0.0086972,
             1.78e-5],
    );
    M_m = (M_m % 360.0) * d2r;

    let mut M_s = evalpoly(
        t_tt,
        vec![357.52772333,
             (99.0 * r + 359.0503400),
             -0.0001603,
             -3.3e-6],
    );
    M_s = (M_s % 360.0) * d2r;

    let mut u_Mm = evalpoly(
        t_tt,
        vec![93.27191028,
             (1342.0 * r + 82.0175381),
             -0.0036825,
             3.1e-6],
    );
    u_Mm = (u_Mm % 360.0) * d2r;

    let mut D_s = evalpoly(
        t_tt,
        vec![297.85036306,
             (1236.0 * r + 307.1114800),
             -0.0019142,
             5.3e-6],
    );
    D_s = (D_s % 360.0) * d2r;

    let mut d = evalpoly(
        t_tt,
        vec![125.04452222,
             -(5.0 * r + 134.1362608),
             0.0020708,
             2.2e-6],
    );
    d = (d % 360.0) * d2r;

    // Nutation in longitude and obliquity
    // ===================================

    // Compute the nutation in the longitude and in obliquity.
    let mut delta_psi = 0.0;
    let mut delta_epsilon = 0.0;

    let n_max = NUT_COEFS_1980.len();
    for i in 0..n_max {
        // Unpack values.
        let an1 = NUT_COEFS_1980[i][0];
        let an2 = NUT_COEFS_1980[i][1];
        let an3 = NUT_COEFS_1980[i][2];
        let an4 = NUT_COEFS_1980[i][3];
        let an5 = NUT_COEFS_1980[i][4];
        let Ai = NUT_COEFS_1980[i][5];
        let Bi = NUT_COEFS_1980[i][6];
        let Ci = NUT_COEFS_1980[i][7];
        let Di = NUT_COEFS_1980[i][8];

        let a_pi = an1 * M_m + an2 * M_s + an3 * u_Mm + an4 * D_s + an5 * d;

        let sin_a_pi = a_pi.sin();
        let cos_a_pi = a_pi.cos();

        delta_psi += (Ai + Bi * t_tt) * sin_a_pi;
        delta_epsilon += (Ci + Di * t_tt) * cos_a_pi;
    }

    //The nutation coefficients in `nut_coefs_1980` lead to angles with unit
    //0.0001". Hence, we must convert to [rad].
    delta_psi *= 0.0001 / 3600.0 * d2r;
    delta_epsilon *= 0.0001 / 3600.0 * d2r;

    // Return the values.
    [mean_obliquity, delta_epsilon, delta_psi]
}
